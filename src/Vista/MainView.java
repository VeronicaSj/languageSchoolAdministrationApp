package Vista;

import Controller.MainController;
import Modelo.Alumn;
import Modelo.Course;
import Modelo.Exam;
import Modelo.Registration;
import java.util.ArrayList;
import etc.FileExporter;
import java.awt.Component;
import java.io.File;
import java.sql.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
VOY A HACER TODA LA DUCUMENTACION Y LOS COMENTARIOS EN ESPAÑOL PORQUE HACERLA 
EN INGLES ME SUPONDRIA DEMASIADO ESFUERZO, Y LA CORRECCION SERÍA MÁS DIFICIL
*/

/**
 * Frame que controla la vista principal.
 * @author veron
 */
public class MainView extends javax.swing.JFrame {
    //tableModels
    private DefaultTableModel dtmAlumn;
    private DefaultTableModel dtmCourse;
    private DefaultTableModel dtmRegist;
    private DefaultTableModel dtmExam;
    
    private MainController mainCont;//controlador principal de todo el programa
    
    
    /**
     * Constructor de la clase. Intentamos establecer la conexion. Si no se
     * puede, damos un mensage de error. Si se puede inicializamos todos los 
     * componentes visuales
     */
    public MainView() {
        mainCont = new MainController();//inicializamos el controlador
        
        if (!mainCont.DBConnect()){//intentamos hacer la conexion a la bd
            //si no se conecta habisamos del error y nos salimos
            myErrorMsg(null, "Error al establecer la conexión");
            System.exit(0);
        }
        
        //si se conecta cargamos la pantalla
        initComponents();
        
        setTitle("Veronica Sanchez Justicia");
        setLocationRelativeTo(null);
        
        //cargamos los tableModels
        dtmAlumn = (DefaultTableModel) tableAlumn.getModel();
        dtmCourse=  (DefaultTableModel) tableCourse.getModel();
        dtmRegist= (DefaultTableModel) tableRegist.getModel();
        dtmExam=  (DefaultTableModel) tableExam.getModel();
        
        //cargamos el contenido de las tablas
        updateAlumnTable();
        updateTableCourse();
        updateTableRegistration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableCourse = new javax.swing.JTable();
        btnMatricular = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableRegist = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableExam = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnJSON = new javax.swing.JButton();
        btnXML = new javax.swing.JButton();
        tFieldDateExam = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAlumn = new javax.swing.JTable();
        tFieldCalif = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tableCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Curso", "Nombre Curso", "Nº Examenes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableCourse);

        btnMatricular.setText("Matricular alumno en curso");
        btnMatricular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMatricularActionPerformed(evt);
            }
        });

        tableRegist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Alumno", "Nombre Alumno", "Codigo Curso", "Nombre Curso", "Nota Media"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRegist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRegistMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableRegist);

        tableExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero Examen", "Fecha Examen", "Nota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableExam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableExamMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tableExam);

        jLabel1.setText("Fecha Examen: ");

        jLabel2.setText("Nota: ");

        btnUpdate.setText("Actualizar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnJSON.setText("Boletin JSON");
        btnJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJSONActionPerformed(evt);
            }
        });

        btnXML.setText("Listado Matriculas XML");
        btnXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXMLActionPerformed(evt);
            }
        });

        tableAlumn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Alumno", "Nombre Alumno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAlumn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnUpdate))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnJSON, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnXML, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tFieldDateExam)
                                            .addComponent(tFieldCalif)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(272, 272, 272)
                                .addComponent(btnMatricular)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMatricular)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tFieldDateExam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tFieldCalif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnJSON)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnXML)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Funcionalidad del boton matricular. Recogemos una seleccion de registro 
     * de la tabla Alumnos, una seleccion de registro de la tabla Cursos y a 
     * partir de ahí insertamos una nueva matricula en la base de datos y 
     * cargamos la tabla visual de matriculas. Controlamos los errores
     * @param evt ActionEvent
     */
    private void btnMatricularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMatricularActionPerformed
        //recogemos la seleccion del usuario
        int seleAlum = tableAlumn.getSelectedRow();
        int seleCourse =tableCourse.getSelectedRow();
        
        if(seleAlum>=0 && seleCourse >=0){//si hay algo en las tablas de alumno y curso seleccionado
            //recogemos las codigos de alumno y curso seleccionados
            String selectedAlumn = (String) dtmAlumn.getValueAt(seleAlum, 0);
            String selectedCourse = (String) dtmCourse.getValueAt(seleCourse , 0);
            
            if(selectedAlumn!=null && selectedCourse!=null){//si la seleccion es valida
                //intentamos hacer la matriculacion
                if (mainCont.registerAlumn(selectedAlumn, selectedCourse)<0){//si no se pudo
                    myErrorMsg(this, "error en la matriculacion, puede que el alumno ya se haya matriculado en ese curso");
                }else{//si se pudo
                    updateTableRegistration();//actualizamos la tabla matriculas
                }
            }else{//si la seleccion no es valida
                myErrorMsg(this, "no has seleccionado parametros validos");
            }
        }else{//si no hay nada en las tablas de alumno y curso seleccionado
            myErrorMsg(this, "no has seleccionado el alumno o el curso");
        }
    }//GEN-LAST:event_btnMatricularActionPerformed
    
    /**
     * Funcionalidad del boton actualizar alumno. Recogemos la seleccion del 
     * usuario en la tabla de matricula y en la tabla de examenes. Recogemos los
     * cambios que se quieren hacer a traves de los textFields de nota y fecha. 
     * Actualizamos la tabla de examenes en la base de datos, junto a la 
     * correspondiente nota media. Controlamos los errores. Controlamos los 
     * errores.
     * @param evt ActionEvent
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String seleAlu, seleCourse; //declaraciones
        int selectedReg=tableExam.getSelectedRow();//recogemos el examen seleccionado
        if(selectedReg>=0){//si hay algo seleccionado
            //recogemos el id del examen seleccionado
            Integer seleExam = (Integer) dtmExam.getValueAt(selectedReg, 0);
            if(seleExam != null){//si la seleccion es valida
                try{//intentamos recoger la actualizacion introducida por el user
                    Date date = (Date) Date.valueOf(tFieldDateExam.getText());
                    Float calif = (Float) Float.parseFloat(tFieldCalif.getText());
                    
                    //no voy a comprobarsi todo está correcto en la seleccion de la 
                    //tabla de matricula porque sería imposible haber seleccionado 
                    //un examen sin tenenr seleccionada la matricula corrrespondiente
                    
                    //recogemos la matricula seleccionada por el usuario
                    selectedReg=tableRegist.getSelectedRow();
                    //recogemos el codigo de alumno seleccionado
                    seleAlu = (String) dtmRegist.getValueAt(selectedReg, 0);
                    //recogemos el codigo de curso seleccionado
                    seleCourse = (String) dtmRegist.getValueAt(selectedReg, 2);
                    
                    //intentamos hacer la actualizacion del examen
                    if(mainCont.updateExam(seleExam, seleAlu, seleCourse, calif, date)==-1){
                        myErrorMsg(this, "Error en la actualizacion");
                    }else{//si se pudo actualizar
                        updateExamTable(seleAlu, seleCourse); //actualizamos la tabla examenes
                        //preguntamos la nueva media a la bd
                        int avrg = mainCont.getAvrgCalifcation(seleAlu, seleCourse);
                        if (avrg>-1) {//actualizamos la tabla matriculas
                            dtmRegist.setValueAt(avrg, selectedReg, 4);
                        } else { //si no se pudo, mensaje de error
                            myErrorMsg(this, 
                                    "Error al actualizar la tabla matriculas");
                        }
                        //vaciamos los textFields
                        tFieldCalif.setText("");
                        tFieldDateExam.setText("");
                    }
                }catch(IllegalArgumentException ex){
                    //si el texto introducido por el use no era valido
                    myErrorMsg(this, "los datos introducidos no son validos");
                }
            }else{//si la seleccion no es valida
                myErrorMsg(this, "Debe seleccionar algun examen valido para actualizarlo");
            }
        }else{//si no hay nada seleccionado
                myErrorMsg(this, "Debe seleccionar algun examen para actualizarlo");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * Funcionalidad del boton exportar JSON. Recogemos de que matricula 
     * queremos hacer el boletin. Generamos el puntero File y hacemos la 
     * exportacion con el controlador. 
     * @param evt ActionEvent
     */
    private void btnJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJSONActionPerformed
        //declaraciones
        File file;
        String seleIdAlu, seleIdCourse;
        Integer seleAvrg;
        
        int seleIdx=tableRegist.getSelectedRow();//recogemos seleccion matricula 
        if(seleIdx>=0){//comprobamos que haya algo seleccionado
            seleIdAlu=(String)dtmRegist.getValueAt(seleIdx, 0);//recogemos el codigo de alumno
            seleIdCourse=(String)dtmRegist.getValueAt(seleIdx, 2);//recogemos el codigo de curso
            seleAvrg = (Integer) dtmRegist.getValueAt(seleIdx, 4);//recogemos la media
            if(seleIdAlu!=null){//si los datos que acabamos de recoger son validos
                file = validateExportation(".json");//intentamos generar el fichero de exportacion
                if (file != null) {//si el fichero de exportacion es valido
                    //formamos la matricula para la que vamos a crear el boletin
                    Registration reg = new Registration(
                            new Alumn(seleIdAlu), 
                            new Course(seleIdCourse),seleAvrg);
                    //intentamos hacer la exportacion
                    if (!mainCont.generateJSON(file, reg)) {
                        //si no se pudo damos el mensaje de error
                        myErrorMsg(this, "No se pudo crear el boletin");
                    }
                }
            }else{//si los datos recogidos no son validos
                myErrorMsg(this, "No has seleccionado ninguna matricula valida");
            }
        }else{//si no hay seleccion
            myErrorMsg(this, "No has seleccionado ninguna matricula");
        }
    }//GEN-LAST:event_btnJSONActionPerformed

    /**
     * Funcionalidad del boton exportar XML. Generamos el puntero File y hacemos la 
     * exportacion con el controlador. 
     * @param evt ActionEvent
     */
    private void btnXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXMLActionPerformed
        //declaraciones
        File file = validateExportation(".xml");
        if(file != null){//si el fichero de exportacion es valido
            if (!mainCont.generateXML(file)) {//intentamos crear el xml
                //si no se pudo damos el mensaje de error
                myErrorMsg(this, "No se pudo exportar");
            }
        }
    }//GEN-LAST:event_btnXMLActionPerformed

    /**
     * Funcionalidad del evento clicar la tabla de matriculas. Cuando pulsamos 
     * la tabla de matricula cargamos los examenes asociados
     * @param evt MouseEvent
     */
    private void tableRegistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRegistMouseClicked
        String seleRegAlu, seleRegCourse;
        int selectedIndex=tableRegist.getSelectedRow();//recogemos la seleccion del usuario
        if(selectedIndex>=0){//si se ha seleccionado algo
            //recogemos el codigo de alumno y de curso seleccionados
            seleRegAlu=(String)dtmRegist.getValueAt(selectedIndex, 0);
            seleRegCourse=(String)dtmRegist.getValueAt(selectedIndex, 2);
            
            if(seleRegAlu!=null){//si la seleccion es valida
                updateExamTable(seleRegAlu, seleRegCourse); //actualizamos la tabla
            }
        }
    }//GEN-LAST:event_tableRegistMouseClicked

    /**
     * Funcionalidad del evento clicar la tabla de examenes. cuando pulsamos 
     * una tabla, cargamos los textFields de actualizacion
     * @param evt MouseEvent
     */
    private void tableExamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableExamMouseClicked
        //cuando pulsamos un examen cargamos los tFields de actualizacion
        int selectedIndex=tableExam.getSelectedRow(); //recogemos lo seleccionado
        if(selectedIndex>=0){//si se ha seleccionado algo
            //recogemos la fecha de examen seleccionado
            Date seleExamDate=(Date)dtmExam.getValueAt(selectedIndex, 1);
            if(seleExamDate!=null){//si la seleccion es valida
                //rellenamos los textFields
                tFieldDateExam.setText(seleExamDate.toString());
                tFieldCalif.setText(dtmExam.getValueAt(selectedIndex, 2)+"");
            }
        }
    }//GEN-LAST:event_tableExamMouseClicked

    /**
     * Funcionalidad del evento cerrar ventana. cuando cerramos la ventana 
     * cerramos la conexion con la db
     * @param evt ActionEvent
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        mainCont.closeDbConnection();
    }//GEN-LAST:event_formWindowClosing
    
    /**
     * funcion auxiliar que nos ayuda a crear un puntero valido a un fichero y 
     * controla los errores del usuario
     * @param extension la extension con la que vamos a hacer la exportacion
     * @return un puntero File valido
     */
    private File validateExportation(String extension){
        File file = null;
        String fileName;
        
        JFileChooser fileCh=new JFileChooser(); //inicializamos el filechooser
        fileCh.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); //filtro
        //preguntamos la localizacionde la exportacion
        fileCh.showDialog(this, "seleccione la localizacion");
        file = fileCh.getSelectedFile();
        if(file != null){//si se ha dado una localizacion
            //preguntamos el nombre del archivo a exportar
            fileName = JOptionPane.showInputDialog(this, "introduzca el nombre del archivo");
            if (fileName !=null) {//si se ha dado un nombre de fichero
                if (fileName.length()>0){ //si se ha escrito algun nombre
                    if ( !fileName.contains(".")) {//si no se ha escrito extension
                        fileName = fileName + extension;//la ponemos nosotros
                    }
                    //creamos el puntero para el fichero .json
                    file = new File(fileCh.getSelectedFile(), fileName);
                    if (file.exists()) {//si el fichero existe, error
                        myErrorMsg(this, "El fichero introducido existe");
                        file = null;
                    }
                } else {//si no se ha escrito ningun nombre, mensage de error
                    myErrorMsg(this, "No se ha introducido ningun nombre");
                    file = null;
                }
            }
        }
        return file;
    }
    
    /**
     * Funcion auxiliar para actualizar la tabla alumnos
     */
    private void updateAlumnTable() {                                                        
        //recogemos la lista de alumnos de la base de datos
        ArrayList<Alumn> list= mainCont.getAlumnList();
        if (list != null) {//si la lista no es nula
            cleanTable(dtmCourse);
            for (int i = 0; i < list.size(); i++) {//recorremos la lista
                Object[] row = new Object[]{ list.get(i).getId(), 
                    list.get(i).getName()};//formamos el registro
                dtmAlumn.addRow(row);//añadimos el registro
            }
        } else {//si la lista es nula ha habido un error con la bd
            myErrorMsg(this, "Error al actualizar la tabla de alumnos");
        }
    }   
    
    /**
     * Funcion auxiliar para actualizar la tabla cursos
     */
    private void updateTableCourse() {   
        //recogemos la lista de cursos de la base de datos
        ArrayList<Course> list = mainCont.getCourseList();
        if (list != null) {//si la lista no es nula
            cleanTable(dtmCourse);
            for (int i = 0; i < list.size(); i++) {//recorremos la lista
                //formamos el registro
                Object[] row = new Object[]{list.get(i).getId(), 
                    list.get(i).getName(), list.get(i).getExamCount()};
                dtmCourse.addRow(row);//añadimos el registro
            }
        } else {//si la lista es nula ha habido un error con la bd
            myErrorMsg(this, "Error al actualizar la tabla de cursos");
        }
    }
    
    /**
     * Funcion auxiliar para actualizar la tabla matriculas
     */
    private void updateTableRegistration() {     
        //recogemos la lista de matruculaciones de la base de datos
        ArrayList<Registration> list = mainCont.getRegistrationList();
        if (list != null) {//si la lista no es nula
            cleanTable(dtmRegist);
            for (int i = 0; i < list.size(); i++) {//recorremos la lista
                //formamos el registro
                Object[] row = new Object[]{ list.get(i).getAlumn().getId(),
                    list.get(i).getAlumn().getName(), 
                    list.get(i).getCourse().getId(), 
                    list.get(i).getCourse().getName(),list.get(i).getAverage()};
                dtmRegist.addRow(row);//añadimos el registro
            }
        } else { //si la lista es nula ha habido un error con la bd
            myErrorMsg(this, "Error al actualizar la tabla de matriculas");
        }
    }
    
    /**
     * Funcion auxiliar para actualizar la tabla examenes
     * @param seleRegAlu alumno del que vamos a mostrar los examenes
     * @param seleRegCourse curso del que vamos a mostrar los examenes
     */
    private void updateExamTable(String seleRegAlu, String seleRegCourse) {
        //recogemos la lista de examenes de la base de datos
        ArrayList<Exam> list = mainCont.getExamList(seleRegAlu,seleRegCourse);
        if (list != null) {//si la lista no es nula
            cleanTable(dtmExam);//borramos todo lo que hubiera en la tabla
            for (int i = 0; i < list.size(); i++) {//recorremos la lista
                //formamos el registro
                Object[] row = new  Object[]{ list.get(i).getExamId(),
                    list.get(i).getDate(), list.get(i).getCalification() };
                dtmExam.addRow(row);//añadimos el registro
            }   
        } else {//si la lista es nula ha habido un error con la bd
            myErrorMsg(this, "Error al actualizar la tabla de examenes");
        }
    }
    
    /**
     * Funcion auxiliar que limpia la tabla de la que pasemos el tableModel
     * @param dtm defaultTableModel de la tabal que queremos limpiar
     */
    private void cleanTable(DefaultTableModel dtm){
        int totalRow= dtm.getRowCount();
        for (int i = 0; i < totalRow; i++) { dtm.removeRow(0); }
    }
    
    /**
     * Funcion auxiliar que muestra un mensaje se error
     * @param parent donde queremos mostrar el mensaje
     * @param msg mensaje que queremos mostrar
     */
    public void myErrorMsg (Component parent, String msg) {
        JOptionPane.showMessageDialog(parent, msg, "Error", 
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnJSON;
    private javax.swing.JButton btnMatricular;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnXML;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField tFieldCalif;
    private javax.swing.JTextField tFieldDateExam;
    private javax.swing.JTable tableAlumn;
    private javax.swing.JTable tableCourse;
    private javax.swing.JTable tableExam;
    private javax.swing.JTable tableRegist;
    // End of variables declaration//GEN-END:variables
}
